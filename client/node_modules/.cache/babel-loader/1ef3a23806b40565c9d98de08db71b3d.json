{"ast":null,"code":"var _jsxFileName = \"/Users/sanarukhsar/Desktop/streams/client/src/components/streams/StreamCreate.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { connect } from \"react-redux\";\nimport { createStream } from \"../../actions\";\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderError = ({\n      error,\n      touched\n    }) => {\n      if (error && touched) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"ui error message\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"header\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11,\n            columnNumber: 11\n          }\n        }, error));\n      }\n    };\n\n    this.renderedInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"field\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"labe\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 9\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 9\n        }\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n      this.props.history.push(\"/\");\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"title\",\n      component: this.renderedInput,\n      label: \"Enter title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      component: this.renderedInput,\n      label: \"Enter Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      class: \"ui button primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You forgot to enter Title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You forgot to enter description\";\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: \"streamCreate\",\n  validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrapped);","map":{"version":3,"sources":["/Users/sanarukhsar/Desktop/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","connect","createStream","StreamCreate","Component","renderError","error","touched","renderedInput","input","label","meta","onSubmit","formValues","props","history","push","render","handleSubmit","validate","errors","title","description","formWrapped","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;;AAEA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SACzCC,WADyC,GAC3B,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAD,KAAwB;AACpC,UAAID,KAAK,IAAIC,OAAb,EAAsB;AACpB,4BACE;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAyBD,KAAzB,CADF,CADF;AAKD;AACF,KATwC;;AAAA,SAUzCE,aAVyC,GAUzB,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AAC1C,0BACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOD,KAAP,CADF,eAEE,+CAAWD,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAGG,KAAKJ,WAAL,CAAiBM,IAAjB,CAHH,CADF;AAOD,KAlBwC;;AAAA,SAmBzCC,QAnByC,GAmB9BC,UAAU,IAAI;AACvB,WAAKC,KAAL,CAAWZ,YAAX,CAAwBW,UAAxB;AACA,WAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACD,KAtBwC;AAAA;;AAuBzCC,EAAAA,MAAM,GAAG;AACP,wBACE;AACE,MAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWI,YAAX,CAAwB,KAAKN,QAA7B,CADZ;AAEE,MAAA,SAAS,EAAC,eAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,SAAS,EAAE,KAAKJ,aAFlB;AAGE,MAAA,KAAK,EAAC,aAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,eASE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,SAAS,EAAE,KAAKA,aAFlB;AAGE,MAAA,KAAK,EAAC,mBAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,eAcE;AAAQ,MAAA,KAAK,EAAC,mBAAd;AAAkC,MAAA,IAAI,EAAC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdF,CADF;AAoBD;;AA5CwC;;AA+C3C,MAAMW,QAAQ,GAAGN,UAAU,IAAI;AAC7B,QAAMO,MAAM,GAAG,EAAf;;AACA,MAAI,CAACP,UAAU,CAACQ,KAAhB,EAAuB;AACrBD,IAAAA,MAAM,CAACC,KAAP,GAAe,2BAAf;AACD;;AACD,MAAI,CAACR,UAAU,CAACS,WAAhB,EAA6B;AAC3BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,iCAArB;AACD;;AACD,SAAOF,MAAP;AACD,CATD;;AAWA,MAAMG,WAAW,GAAGvB,SAAS,CAAC;AAC5BwB,EAAAA,IAAI,EAAE,cADsB;AAE5BL,EAAAA;AAF4B,CAAD,CAAT,CAGjBhB,YAHiB,CAApB;AAKA,eAAeF,OAAO,CAAC,IAAD,EAAO;AAAEC,EAAAA;AAAF,CAAP,CAAP,CAAgCqB,WAAhC,CAAf","sourcesContent":["import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { connect } from \"react-redux\";\nimport { createStream } from \"../../actions\";\n\nclass StreamCreate extends React.Component {\n  renderError = ({ error, touched }) => {\n    if (error && touched) {\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      );\n    }\n  };\n  renderedInput = ({ input, label, meta }) => {\n    return (\n      <div className=\"field\">\n        <labe>{label}</labe>\n        <input {...input}></input>\n        {this.renderError(meta)}\n      </div>\n    );\n  };\n  onSubmit = formValues => {\n    this.props.createStream(formValues);\n    this.props.history.push(\"/\");\n  };\n  render() {\n    return (\n      <form\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\n        className=\"ui form error\"\n      >\n        <Field\n          name=\"title\"\n          component={this.renderedInput}\n          label=\"Enter title\"\n        />\n        <Field\n          name=\"description\"\n          component={this.renderedInput}\n          label=\"Enter Description\"\n        />\n        <button class=\"ui button primary\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n  if (!formValues.title) {\n    errors.title = \"You forgot to enter Title\";\n  }\n  if (!formValues.description) {\n    errors.description = \"You forgot to enter description\";\n  }\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: \"streamCreate\",\n  validate\n})(StreamCreate);\n\nexport default connect(null, { createStream })(formWrapped);\n"]},"metadata":{},"sourceType":"module"}